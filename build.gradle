import java.time.ZonedDateTime
import java.time.temporal.ChronoUnit

plugins {
    id 'org.springframework.boot' version '2.5.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'application'
    id 'idea'
    id 'maven-publish'
    id 'edu.sc.seis.launch4j' version '2.5.0'
}

sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'javax.measure', name: 'unit-api', version: '2.1.3'
    implementation group: 'tech.units', name: 'indriya', version: '2.0.4'
    implementation group: 'systems.uom', name: 'systems-common', version: '2.0.2'
    implementation group: 'systems.uom', name: 'systems-quantity', version: '2.0.2'
    implementation group: 'systems.uom', name: 'systems-unicode', version: '2.0.2'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
//    implementation group: 'javax.jlfgr', name: 'jlfgr', version: '1.0'
    implementation files('lib/jlfgr-1_0.jar')

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
}

test {
    useJUnitPlatform()
}

task nonGuiTest(type: Test) {
    useJUnitPlatform {
        excludeTags 'gui'
    }
}

task guiTest(type: Test) {
    useJUnitPlatform {
        includeTags 'gui'
    }
}

bootJar {
    manifest {
        attributes "Implementation-Name": project.name
        attributes "Implementation-Version": project.version
        attributes "Implementation-URL": "https://github.com/bemace/SpotterLevel3"
        attributes "Build-Time": ZonedDateTime.now().truncatedTo(ChronoUnit.SECONDS).format(java.time.format.DateTimeFormatter.ISO_ZONED_DATE_TIME)
        attributes "Build-Host": InetAddress.getLocalHost().getHostName()
        attributes "Build-OS": System.getProperty("os.name", "unknown") + " v" + System.getProperty("os.version", "?")
        attributes "Build-Tool": "Gradle " + project.gradle.gradleVersion
        // TODO: add some of GitHub's variables: https://docs.github.com/en/actions/reference/environment-variables#default-environment-variables
    }
}

launch4j {
    mainClassName = 'club.w0sv.sl3.SpotterLevel3Application'
    jarTask = jar
//    bundledJrePath = "C:/Program Files/java/jdk-11.0.2"
    bundledJrePath = './jre/jdk-11.0.11+9-jre'
}

ext.jreDistributionPath = "launch4j/jre"
ext.jreArchiveSourcePath = "platform/windows/"
ext.jreTargetVersion = "11.0.11_9"

task extractWin64Jre(type: Sync) {
    def src = "${jreArchiveSourcePath}/OpenJDK11U-jre_x64_windows_hotspot_${jreTargetVersion}.zip"
    def dst = "${buildDir}/${jreDistributionPath}"
    from zipTree(src)
    into dst
    doLast() {
        if(getDidWork()) {
            getLogger().info "Extracting JRE from $src into $dst"
        }
    }
    group = 'Windows Distribution'
    description = "Unzips the Windows 64-bit JRE from ${src} into the bundled JRE path."
}

createExe.dependsOn(extractWin64Jre)

task cleanJre {
    outputs.upToDateWhen {
        return !( new File(project.jreDistributionPath).exists() );
    }
    doLast() {
        delete project.jreDistributionPath
        getLogger().info "Deleting JRE distribution directory: ${jreDistributionPath}"
    }
    group = 'Build'
    description = "Removes the JRE distribution directory."
}

clean.dependsOn(cleanJre)

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

